MINION 3

**VARIABLES**
<%
ph <- parseholes(hole_str)
N <- size(ph)
h <- holes(ph)
%>

<%
cat(sprintf("DISCRETE l[%s,%s] {0..%s}", N, N, N))
%>

**SEARCH**
PRINT ALL

**CONSTRAINTS**

# Latin constraints

## Rows

<%
cat(sapply(seq(0, N - 1), row(ph)), sep = "\n")
%>

## Columns

<%
cat(sapply(seq(0, N - 1), column(ph)), sep = "\n")
%>

# Holes

<%
for(x in seq(0, N - 1, 2)) {
  cat(do.call(eq, expand.grid(i = h(x), j = h(x), k = 0)), sep = "\n")
}
for(x in seq(0, N - 1)) {
  cat(occurrence(x, "_", h(x) + 1, 0), sep = "\n")
  cat(occurrence(x, "_", 0, length(h(x))), sep = "\n")
  cat(occurrence("_", x, h(x) + 1, 0), sep = "\n")
  cat(occurrence("_", x, 0, length(h(x))), sep = "\n")
}
%>

# Self-orthgonality constraints

<%
# Start with all (i, j, k, l)
S <- expand.grid(i = 0:(N - 1), j = 0:(N - 1), k = 0:(N - 1), l = 0:(N - 1))
# Filter out the empty ones
S <- S[rownames(fun.12(S[, c("i", "j")], empties(ph))), ]
S <- S[rownames(fun.12(S[, c("k", "l")], empties(ph))), ]
# Filter out (i,j,k,l) where i = j and k = l
S <- S[(S$i != S$k) | (S$j != S$l), ]
# Filter out (i,j,k,l) where i <= k
S <- S[(S$i <= S$k), ]
# Order
S <- S[order(S$i, S$j, S$k, S$l), ]

x <- mapply(watchvecneq, S$i, S$j, S$k, S$l)
cat(paste(x, collapse = "\n" ))
%>

**EOF**
